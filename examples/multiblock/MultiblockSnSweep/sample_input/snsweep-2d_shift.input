// 
// 文件名:    rotation-2d.input
// 软件包:    JASMIN application
// 版权  :	(c) 2004-2010 北京应用物理与计算数学研究所
// 版本号:    $Revision: 1.4 $
// 修改  :    $Date: 2007/01/12 06:52:41 $
// 描述  :    输入文件:JASMIN-RotAdv实例.
//

Main {
   // 日志文件名称.
   log_file_name = "MultiblockSnSweep-snsweep_2d_shift.log"
   log_all_nodes    = FALSE

   // 可视化数据场的输出参数.
   javis_dump_interval     = 10        // 输出时间步的间隔. 0表示关闭.
   javis_dump_dirname      = "javis_snsweep2d"  // 存储数据场的目录名.
}

MultiblockCartesianGeometry{
   BLOCKS_LIST {             // 块序列.
      number_of_blocks = 4   // 块总数.
      block_0 {              // 第0块.
         domain_boxes = [(0,0),(49,29)]   // 索引范围.
         x_lo         = 0.0,0.0           // 第0块计算区域左下角的坐标值.
         x_up         = 1.5,1.2           // 第0块计算区域右上角的坐标值.
      }
      block_1 {              // 第1块.
         domain_boxes = [(50,20),(99,39)]   // 索引范围.
         x_lo         = 1.5 ,0.0          // 第1块计算区域左下角的坐标值.
         x_up         = 3.0 ,0.8          // 第1块计算区域右上角的坐标值.
      }
      block_2 {              // 第2块.
         domain_boxes = [(10,30),(59,49)]   // 索引范围.
         x_lo         = 0.0,1.2          // 第2块计算区域左下角的坐标值.
         x_up         = 1.5,2.0          // 第2块计算区域右上角的坐标值.
      }
      block_3 {              // 第3块.
         domain_boxes = [(100,40),(149,69)]   // 索引范围.
         x_lo         = 1.5 ,0.8          // 第3块计算区域左下角的坐标值.
         x_up         = 3.0 ,2.0          // 第3块计算区域右上角的坐标值.
      }
   }
   CONFORMING_NEIGHBORS_LIST {
      number_of_neighbors = 5    // 邻居数.
      neighbors_0 {
         block_a      = 0
         block_b      = 1
         point_in_a_space =  50,0
         point_in_b_space =  50,20
      }
      neighbors_1 {
         block_a      = 0
         block_b      = 2
         point_in_a_space =  0,30
         point_in_b_space = 10,30
      }
      neighbors_2 {
         block_a      = 0
         block_b      = 3
         point_in_a_space =  50,20
         point_in_b_space = 100,40
      }
      neighbors_3 {
         block_a      = 1
         block_b      = 3
         point_in_a_space =  50,40
         point_in_b_space = 100,40
      }
      neighbors_4 {
         block_a      = 2
         block_b      = 3
         point_in_a_space =  60,49
         point_in_b_space = 100,69
      }
   }
}

SnSweep{
  // 材料代号
  matter = "1004"

  // 能群系数
  #include "eg2.para"

  // S2离散
  s_n = 4
  #include "sn.para"
}

SnSweepLevelIntegrator{
   dt = 1e-3
   error_tole = 1e-11
   max_sweep_iter = 100
}

HierarchyTimeIntegrator{

   start_time           = 0.0   // 模拟的初始时刻.
   end_time             = 0.1   // 模拟的终止时刻.
   max_integrator_steps = 100   // 模拟的最大时间步数.

   GriddingAlgorithm{
      // 最大网格层数.
      max_levels = 1   

      // 最大网格片大小.
      largest_patch_size {
         level_0 = 32,32
      }

      // 最小网格片大小.
      smallest_patch_size {
         level_0 = 4,4
      }

   }

}

TimerManager{
   print_summed     = TRUE
   print_max        = TRUE
   timer_list       = "apps::*::*", "algs::HierarchyTimeIntegrator::*"
}

