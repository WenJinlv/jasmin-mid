// 
// 文件名:    mbsing_circle2d.input
// 软件包:    JASMIN application
// 版权  :	(c) 2004-2010 北京应用物理与计算数学研究所
// 版本号:    $Revision: 1.4 $
// 修改  :    $Date: 2007/01/12 06:52:41 $
// 描述  :    输入文件:JASMIN-MBSingDemo实例.
//

MBSingDemo {
}

DeformingGridInputUtilities2 {
     
        POINTS {
           number_of_points = 9 
           coordinates_0    = 0.0,-0.25, 0.0 , 0.25,-0.5, 0.0, 0.5,-1.0, 1.0
           coordinates_1    = 0.0, 0.0 , 0.25,  0.0, 0.0, 0.5, 0.0, 0.0, 0.0
        }
        SEGMENTS {
           number_of_segments = 13
           segment_0 {
              type_of_geometry   = "POINT"
              number_of_cells    = 40
              start_point_number = 0
           }
           segment_1 {
              type_of_geometry   = "LINE"
              number_of_cells    = 20
              start_point_number = 0
              end_point_number   = 1
              partitioning_method= "EVEN"
           }
           segment_2 {
              type_of_geometry   = "LINE"
              number_of_cells    = 20
              start_point_number = 0
              end_point_number   = 3
              partitioning_method= "EVEN"
           }
           segment_3 {
              type_of_geometry   = "CARC"
              number_of_cells    = 20
              start_point_number = 1
              end_point_number   = 2
              center_on_left     = FALSE
              radius             = 0.25
              partitioning_method= "EVEN"
           }
           segment_4 {
              type_of_geometry   = "CARC"
              number_of_cells    = 20
              start_point_number = 2
              end_point_number   = 3 
              center_on_left     = FALSE
              radius             = 0.25
              partitioning_method= "EVEN"
           }
           segment_5 {
              type_of_geometry   = "LINE"
              number_of_cells    = 15
              start_point_number = 1
              end_point_number   = 4
              partitioning_method= "EVEN"
           }
           segment_6 {
              type_of_geometry   = "LINE"
              number_of_cells    = 15
              start_point_number = 2
              end_point_number   = 5
              partitioning_method= "EVEN"
           }
           segment_7 {
              type_of_geometry   = "LINE"
              number_of_cells    = 15
              start_point_number = 3
              end_point_number   = 6
              partitioning_method= "EVEN"
           }
           segment_8 {
              type_of_geometry   = "CARC"
              number_of_cells    = 20
              start_point_number = 4
              end_point_number   = 5
              center_on_left     = FALSE
              radius             = 0.50
              partitioning_method= "EVEN"
           }
           segment_9 {
              type_of_geometry   = "CARC"
              number_of_cells    = 20
              start_point_number = 5
              end_point_number   = 6 
              center_on_left     = FALSE
              radius             = 0.50
              partitioning_method= "EVEN"
           }
           segment_10 {
              type_of_geometry   = "LINE"
              number_of_cells    = 15 
              start_point_number = 4
              end_point_number   = 7
              partitioning_method= "EVEN"
           }
           segment_11 {
              type_of_geometry   = "LINE"
              number_of_cells    = 15
              start_point_number = 6 
              end_point_number   = 8 
              partitioning_method= "EVEN"
           }
           segment_12 {
              type_of_geometry   = "CARC"
              number_of_cells    = 40
              start_point_number = 7 
              end_point_number   = 8 
              center_on_left     = FALSE
              radius             = 1.0 
              partitioning_method= "EVEN"
           }
        }
        DOMAINS {
           number_of_domains = 4
           domain_0 {
              mesh_generation_method = "YEVEN"
              box   = [(0,0),(39,19)] 
              left_edge  = 1
              right_edge = 2
              lower_edge = 0
              upper_edge = 3,4
           }
           domain_1 {
              mesh_generation_method = "YEVEN"
              box   = [(0,0),(19,14)]
              left_edge  = 5
              right_edge = 6
              lower_edge = 3
              upper_edge = 8
           }
           domain_2 {
              mesh_generation_method = "YEVEN"
              box   = [(0,0),(19,14)]   
              left_edge  = 6
              right_edge = 7
              lower_edge = 4
              upper_edge = 9 
           }
           domain_3 {
              mesh_generation_method = "YEVEN"
              box   = [(0,0),(39,14)]
              left_edge  = 10
              right_edge = 11
              lower_edge = 8,9
              upper_edge = 12 
           }
        }
        BLOCKS {
           number_of_blocks = 4
           block_0 {
              domains = 0
              input_patch_boxes = [(0,0),(39,3)]
           }
           block_1 {
              domains = 1
           }
           block_2 {
              domains = 2
           }
           block_3 {
              domains = 3
           }
        }

}

TimerManager{
   timer_list       = "apps::main::*","algs::*::*"
   print_summed     = TRUE
   print_max        = TRUE
}

Main {

    // 日志文件名称.
   log_file_name = "MultiblockSingularityDemo-mbstruct_circle2d.log"
   log_all_nodes    = FALSE

   // 可视化数据场的输出参数.
   viz_dump_interval     =  1                // 输出的间隔. 0表示关闭.
   viz_dump_dirname     = "viz_MBSingDemo2d"  // 存储数据场的目录名.
   viz_number_procs_per_file = 1           // 多少个进程共享一个输出文件.

   // 重启动控制参数.
   restart_interval       = 1000      // 重启动时间步的间隔. 0表示关闭.
   restart_write_dirname  = "restart_MBSingDemo2d" // 存储重启动数据场的目录名.

}

MBSingDemoLevelIntegrator{
}

HierarchyTimeIntegrator{

   start_time           = 0.e0    // 模拟的初始时刻.
   end_time             = 100.0   // 模拟的终止时刻.
   max_integrator_steps = 10       // 模拟的最大时间步数.
   max_dt              = 10.0     // 最大时间步步长.

   GriddingAlgorithm{

      // 仅包含单层网格.
      max_levels = 1

      // 最大网格片大小.
      largest_patch_size {
         level_0 = 64,64 
      }

      // 最小网格片大小.
      smallest_patch_size {
         level_0 = 8 , 8
      }

   }

}

