// 
// 文件名:    rotation-3d.input
// 软件包:    JASMIN application
// 版权  :	(c) 2004-2010 北京应用物理与计算数学研究所
// 版本号:    $Revision: 1.4 $
// 修改  :    $Date: 2007/01/12 06:52:41 $
// 描述  :    输入文件:JASMIN-RotAdv实例.
//


RotAdv {

   // Godunov格式的阶数及对角输运的校正格式.
   //    阶数据  : 1,2,4;
   //    校正格式: CORNER_TRANSPORT_1, CORNER_TRANSPORT_2
   godunov_order    = 4                
   corner_transport = "CORNER_TRANSPORT_2"

   // 梯度检测误差阈值.
   grad_tol = 4.0,6.0,10.0

   // 物理模型. 参考LinAdv.h中的说明.
   // 三种模型: CIRCLE_ROTATION_DELTA,
   //           CIRCLE_ROTATION_PARAB,
   //           SQUARE_ROTATION_DELTA
   model_problem = "CIRCLE_ROTATION_DELTA"
   omega         = 0.0,0.0,-1.0
   center        = 0.5,0.0,0.0
   radius        = 0.16


}

TimerManager{
   
   print_summed     = TRUE
   print_max        = TRUE
   timer_list       = "apps::main::*",
                      "algs::HierarchyTimeIntegrator::*"

}

Main {

    // 日志文件名称.
   log_file_name = "RotAdv-rotation_3d.log"
   log_all_nodes    = FALSE

   // 可视化数据场的输出参数.
  viz_dump_interval     = 10       // 输出时间步的间隔. 0表示关闭.
   viz_dump_dirname      = "viz_RotAdv3d"  // 存储数据场的目录名.
   viz_number_procs_per_file = 1         // 多少个进程共享一个输出文件.

   // 重启动控制参数.
   restart_interval       = 1000      // 重启动时间步的间隔. 0表示关闭.
   restart_write_dirname  = "restart_RotAdv3d" // 存储重启动数据场的目录名.

   // 时间积分模式：同步模式"SYNCHRONIZED"
   // timestepping = "SYNCHRONIZED"

}

CartesianGeometry{
   domain_boxes	= [(0,0,0),(63,63,63)]   // 计算区域最粗网格层的索引空间.

   x_lo = -1.20 , -1.20, -1.20       // 计算区域的左下角坐标值.
   x_up =  1.20 ,  1.20,  1.20       // 计算区域的右上角坐标值.

   periodic_dimension = 0,0,0   // 沿X,Y坐标轴方向,是否为周期边界条件.1表示是. 
}

RotAdvLevelIntegrator{
   cfl = 0.9e0    // 最大CFL因子.
}

HierarchyTimeIntegrator{

   start_time           = 0.e0     // 模拟的初始时刻.
   end_time             = 100.e0   // 模拟的终止时刻.
   max_integrator_steps = 100       // 模拟的最大时间步数.

   max_dt              = 1.e-1       // 最大时间步步长.
   grow_dt             = 1.2         // 连续两个时间步长的最大放大倍数.
   regrid_interval     = 2           // 网格层重构间隔.
   regrid_tag_buffer   = 2           // 网格层标记缓冲区大小.

   use_nonuniform_workload  = TRUE
   load_balancing_threshold = 0.95
   print_balance_efficiency = TRUE

   StandardTagAndInitialize {
      tagging_method = "ERROR_DETECTOR"
   }

   GriddingAlgorithm{

      // 最大网格层数.
      max_levels = 3         // 网格片层次结构中的最大网格层数.

      // 相对于相邻粗网格层的网格细化率. 
      // 这里,列出的网格层数必须不小于最大网格层数.
      ratio_to_coarser { 
         level_1 = 2 , 2, 2
         level_2 = 2 , 2, 2
         level_3 = 2 , 2, 2
         level_4 = 2 , 2, 2
         level_5 = 2 , 2, 2
         level_6 = 2 , 2, 2
      }

      // 最大网格片大小.
      largest_patch_size {
         level_0 = 32 , 32, 32
         // 所有细网格层与该值一致.
      }

      // 最小网格片大小.
      smallest_patch_size {
         level_0 = 16 , 16, 16
         // 所有细网格层与该值一致.
      }

   }

}

