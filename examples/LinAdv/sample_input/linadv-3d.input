// 
// 文件名:    linadv-3d.input
// 软件包:    JASMIN application
// 版权  :	(c) 2004-2010 北京应用物理与计算数学研究所
// 版本号:    $Revision: 1.4 $
// 修改  :    $Date: 2007/01/12 06:52:41 $
// 描述  :    输入文件:JASMIN-LinAdv实例.
//


Main{

   // 日志文件名称.
   log_file_name = "LinAdv-linadv_3d.log"
   log_all_nodes    = FALSE

   // 可视化数据场的输出参数.
   javis_dump_interval         = 10                 // 输出时间步的间隔. 0表示关闭.
   javis_dump_dirname          = "javis_linadv3d"  // 存储数据场的目录名.
   javis_number_procs_per_file = 1                 // 多少个进程共享一个输出文件.

   // 重启动控制参数.
   restart_dump_interval       = 1000                 // 重启动时间步的间隔. 0表示关闭.
   restart_dump_dirname        = "restart_linadv3d" // 存储重启动数据场的目录名.

   // 时间积分模式：缺省为细化模式.
   use_time_refinement = TRUE
}

CartesianGeometry{
   domain_boxes	= [(0,0,0),(99,19,19)]   // 计算区域最粗网格层的索引空间.

   x_lo =  0.0 ,   0.0, 0.0    // 计算区域的左下角坐标值.
   x_up =  10.0 ,  2.0, 2.0    // 计算区域的右上角坐标值.

   periodic_dimension = 0,1,1  // 沿X,Y坐标轴方向,是否为周期边界条件.1表示是. 

   // 如果不提供以下子数据库，表示在时间积分之前不重建网格几何.
   ReconfigureGeometry{             // 重建网格几何: 最小box.
      smallest_box_size = 16,16,16
   }

}


LinAdv {
   constant_x_velocity = 0.1       // X方向的对流速度.
}

HierarchyTimeIntegrator{

   // 时间控制参数
   start_time           = 0.e0     // 模拟的初始时刻.
   end_time             = 70.0     // 模拟的终止时刻.
   max_integrator_steps = 1000     // 模拟的最大时间步数.

   max_dt              = 1.0       // 最大时间步步长.
   grow_dt             = 1.2       // 连续两个时间步长的最大放大倍数.

   // 网格重构控制参数
   regrid_interval     = 2                // 网格层重构间隔.
   regrid_tag_buffer   = 2                // 网格层标记缓冲区大小.
   StandardTagAndInitialize{
      tagging_method = "ERROR_DETECTOR"   // 误差检测标记方法.
   }
   GriddingAlgorithm{

      // 最大网格层数.
      max_levels = 3               // 网格片层次结构中的最大网格层数.

      // 相对于相邻粗网格层的网格细化率.
      ratio_to_coarser {
         level_1 = 2 , 2 , 2
         level_2 = 2 , 2 , 2
      }

      // 最大网格片大小.
      largest_patch_size {
         level_0 = 32, 32, 32
         // 所有细网格层与该值一致.
      }

      // 最小网格片大小.
      smallest_patch_size {
         level_0 = 16, 16, 16
         // 所有细网格层与该值一致.
      }
   }
   use_nonuniform_workload  = FALSE     // 是否采用非均匀负载模型
   load_balancing_threshold = 0.95      // 负载平衡阈值
   print_balance_efficiency = FALSE     // 是否输出负载平衡相关的统计数据
}

TimerManager{
   timer_list       = "apps::main::*","algs::*::*"
   print_summed     = TRUE
   print_max        = TRUE
}

