//
// 文件名:     RP-testY-2d.input
// 软件包:     JASMIN application
// 版权  :     (c) 2004-2010 北京应用物理与计算数学研究所
// 版本号:     $Revision: 170 $
// 修改  :     $Date: 2007-06-27 08:44:22  $
// 描述  :     Input for testing Euler Riemann solvers in 2d code (Y direction)
//

Euler {
   gamma            = 1.4      // gamma = Ratio of specific heats

   godunov_order    = 4        // order of Goduov slopes (1, 2, or 4)

   riemann_solve        = "APPROX_RIEM_SOLVE"
// riemann_solve        = "EXACT_RIEM_SOLVE"
// riemann_solve        = "HLLC_RIEM_SOLVE"

   data_problem     = "PIECEWISE_CONSTANT_Y"

   Initial_data {
//    Run test 1 for 50 steps
  #include "RP-test1.data"
//    Run test 2 for 50 steps
//#include "RP-test2Y.data"
//    Run test 3 for 75 steps
//#include "RP-test3.data"
//    Run test 4 for 75 steps
//#include "RP-test4.data"
//    Run test 5 for 125 steps
//#include "RP-test5Y.data"
//    Run test 6 for 60 steps
//#include "RP-test6Y.data"
//    Run test 7 for 75 steps
//#include "RP-test7Y.data"
   }

   Boundarydata {
      boundary_edge_xlo {
         boundary_condition      = "FLOW"
      }
      boundary_edge_xhi {
         boundary_condition      = "FLOW"
      }
      boundary_edge_ylo {
         boundary_condition      = "FLOW"
      }
      boundary_edge_yhi {
         boundary_condition      = "FLOW"
      }

      boundary_node_xlo_ylo {
         boundary_condition      = "YFLOW"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "YFLOW"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "YFLOW"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "YFLOW"
      }
   }


}

Main {
// log file parameters
   log_file_name = "Euler-RP_testY_2d.log"
   log_all_nodes    = FALSE

// visualization dump parameters 
   javis_dump_interval        = 5       // zero to turn off
   javis_dump_dirname         = "RPtest_javis"

// restart dump parameters
   restart_interval         = 0         // zero to turn off
   restart_write_dirname    = "restart"
}

TimerManager{
   maintain_exclusive_time = TRUE
   maintain_concurrent_time = TRUE
   timer_list               = "apps::main::*",
                              "apps::Euler::*",
                              "algs::GriddingAlgorithm::*"
 
}

GridGeometry {
   domain_boxes = [ (0,0) , (4,99) ]
   x_lo         = 0.0e0 , -0.5e0      // lower end of computational domain.
   x_up         = 0.04e0 , 0.5e0      // upper end of computational domain.
}

EulerLevelIntegrator {
   cfl                      = 0.9e0    // max cfl factor used in problem


}


HierarchyTimeIntegrator {
   start_time            = 0.e0     // initial simulation time
   end_time              = 100.e0    // final simulation time
   max_integrator_steps  = 50    // max number of simulation timesteps
   max_dt              = 1.e-2       // 最大时间步步长.
   grow_dt             = 1.1         // 连续两个时间步长的最大放大倍数.
   regrid_interval     = 2           // 网格层重构间隔.
   regrid_tag_buffer   = 2           // 网格层标记缓冲区大小.

   use_nonuniform_workload  = FALSE
   load_balancing_threshold = 0.95
   print_balance_efficiency = FALSE

StandardTagAndInitialize{
   tagging_method = "ERROR_DETECTOR"
   }


GriddingAlgorithm {
   max_levels               = 1       // Maximum number of levels in hierarchy.

   largest_patch_size {
      level_0 = 100,100
   }

   smallest_patch_size {
      level_0 = 4,4
   }
}

}


