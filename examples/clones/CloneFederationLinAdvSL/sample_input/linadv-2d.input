// 
// 文件名:	linadv-2d.input
// 软件包:	JASMIN application
// 版权  :	(c) 2004-2010 北京应用物理与计算数学研究所
// 版本号:	$Revision: 1.4 $
// 修改  :	$Date: 2007/01/12 06:52:41 $
// 描述  :	输入文件:JASMIN-LinAdvSL实例.
//

Main{
    // 日志文件名称.
   log_file_name = "CloneFederationLinAdvSL-linadv_2d.log"
   log_all_nodes    = FALSE

   // 可视化数据场的输出参数.
   javis_dump_interval         = 10                // 输出时间步的间隔. 0表示关闭.
   javis_dump_dirname          = "javis_linadv2d"  // 存储数据场的目录名.
   javis_number_procs_per_file = 1                 // 多少个进程共享一个输出文件.

   // 重启动控制参数.
   restart_dump_interval       = 100      // 重启动时间步的间隔. 0表示关闭.
   restart_dump_dirname        = "restart_linadv2d" // 存储重启动数据场的目录名.
}


FederationCartesianGeometry{
   domain_boxes	= [(0,0),(1599,319)]     // 计算区域最粗网格层的索引空间.

   x_lo =  0.0 ,   0.0         // 计算区域的左下角坐标值.
   x_up =  10.0 ,  2.00        // 计算区域的右上角坐标值.

   periodic_dimension = 0,1    // 沿X,Y坐标轴方向,是否为周期边界条件.1表示是. 

   federation {

       number_of_federals = 3
       name_of_federals   = "LinAdv_LEFT","LinAdv_MIDDLE","LinAdv_RIGHT"

       domain_boxes_0  = [(   0,0),( 699,319)]
       domain_boxes_1  = [( 600,0),( 999,319)]
       domain_boxes_2  = [(1000,0),(1599,319)]

       number_of_clones_0 = 3
       number_of_clones_1 = 2
       number_of_clones_2 = 4

   }
}

LinAdv {
   constant_x_velocity = 0.1            // X方向的对流速度.
}

HierarchyTimeIntegrator{

   // 时间控制参数
   start_time           = 0.e0          // 模拟的初始时刻.
   end_time             = 70.0          // 模拟的终止时刻.
   max_integrator_steps = 2000          // 模拟的最大时间步数.
   max_dt              = 1.0            // 最大时间步步长.
   grow_dt             = 1.2            // 连续两个时间步长的最大放大倍数.

   // 网格重构控制参数
   regrid_interval     = 2              // 网格重构间隔
   GriddingAlgorithm{

      // 最大网格层数.
      max_levels = 1         // 网格片层次结构中的最大网格层数.

      // 最大网格片大小.
      largest_patch_size {
         level_0 = 128,64 
      }

      // 最小网格片大小.
      smallest_patch_size {
         level_0 = 32,16
      }

      federal_1 {
         largest_patch_size {
            level_0 = 160,80 
         }
      }
      federal_2 {
         largest_patch_size {
            level_0 = 120,32
         }
      }

   }

   use_nonuniform_workload  = TRUE   // 是否采用非均匀负载模型
   load_balancing_threshold = 0.85,0.75,0.90   // 负载平衡阈值
   print_balance_efficiency = TRUE   // 是否输出负载平衡相关的统计数据

}

TimerManager{
   timer_list       = "apps::main::*","algs::*::*"
   print_summed     = TRUE
   print_max        = TRUE
}

