// 
// 文件名:    mbsing_8blocks_fd.input
// 软件包:    JASMIN application
// 版权  :	(c) 2004-2010 北京应用物理与计算数学研究所
// 版本号:    $Revision: 1.4 $
// 修改  :    $Date: 2007/01/12 06:52:41 $
// 描述  :    输入文件:JASMIN-FDMBSingDemo实例.
//

FDMBSingDemo {
}
     

DeformingGridConstructionUtilities{

    coords_file_name = "mbsing9.dat"

    bdry_file_name = "mbsing9_bdry.dat"

    BOXES {
       number_of_boxes = 1
       boxes_0 {
          block_id = 0
          input_patch_boxes = [(0,0),(39,3)]
       }
    }

    FEDERALS {
       number_of_federals = 3
       federal_0 {
          name   = "FDMBSingDemo_LEFT"
          blocks = 0,1,2
          nprocs = 3
       }
       federal_1 {
          name   = "FDMBSingDemo_MIDDLE"
          blocks = 3,4,5,6,7 
          nprocs = 2
       }
       federal_2 {
          name   = "FDMBSingDemo_RIGHT"
          blocks = 8
          nprocs = 4
       }
       federal_sets_in_parallel {
          number_of_sets = 1
          sets_0         = 1,2
       }
    }

}

TimerManager{
   timer_list       = "apps::main::*","algs::*::*"
   print_summed     = TRUE
   print_max        = TRUE
}

Main {

    // 日志文件名称.
   log_file_name = "FDMBSingularDemo-mbsing9_pfd.log"
   log_all_nodes    = FALSE

   // 可视化数据场的输出参数.
   javis_dump_interval     =  1                // 输出的间隔. 0表示关闭.
   javis_dump_dirname     = "viz_MBSingDemo2d"  // 存储数据场的目录名.
   javis_number_procs_per_file = 1           // 多少个进程共享一个输出文件.

   // 重启动控制参数.
   restart_dump_interval  = 1       // 重启动时间步的间隔. 0表示关闭.
   restart_dump_dirname  = "restart_MBSingDemo2d" 
                                    // 存储重启动数据场的目录名.
}

HierarchyTimeIntegrator{

   start_time           = 0.e0    // 模拟的初始时刻.
   end_time             = 100.0   // 模拟的终止时刻.
   max_integrator_steps = 10       // 模拟的最大时间步数.
   max_dt              = 10.0     // 最大时间步步长.

   regrid_interval     = 2
   GriddingAlgorithm{

      // 仅包含单层网格.
      max_levels = 1

      // 最大网格片大小.
      largest_patch_size {
         level_0 = 64,64 
      }

      // 最小网格片大小.
      smallest_patch_size {
         level_0 = 4 , 4
      }

      federal_1 {
         largest_patch_size {
            level_0 = 6,6 
         }
      }

      federal_2 {
         largest_patch_size {
            level_0 = 4, 4
         }
      }

   }

   use_nonuniform_workload  = TRUE  // 是否采用非均匀负载模型
   load_balancing_threshold = 0.95  // 负载平衡阈值
   print_balance_efficiency = TRUE  // 是否输出负载平衡相关的统计数据

}

